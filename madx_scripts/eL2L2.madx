// =====================================================================
// FCC_ee: Transfer Line for Electrons eL2L2
// =====================================================================
//
// This code is originally written by A. De Santic, C. Miraldi, now modified by Sebastian Kalos
// It now includes more annotation with (hopefully) better explanations of what various statements mean
//
// also, many commented sections were deleted, and plotting commands originally done via madx were deleted as well
//
// Description:
// the main script to be run, using the command $ ./madx el2L2.madx
// this file calls beamline definitions of arcs and straight sectons, matching sections between them, and combines them into one big sequence
// It perfomrs the Twiss scan using the initial Beta-function values, returning the optical functions and other parameters
// at each element location in the file eL2L2.out
// ---------------------------------------------------------------------

TITLE, S="FCC_ee: eL1L2"; // just a name of this thing, obviously

// ---------------------------------------------------------------------
// OPTIONS
option,echo = false,warn = true; // switch off copying the input to the standard output but keep issuing warning statements
// a better explanation of echo, warn statements can be found here: https://mad.web.cern.ch/mad/webguide/manual.html#Ch4.S5

// ---------------------------------------------------------------------
// Load files
print, text='LOADING FODO';
CALL, FILE="eL2L2_fodo.madx"; // calling a file with definition of a FODO cell

print, text='LOADING ARC1';
CALL, FILE="eL2L2_a1.madx"; // calling a file with ARC 1 (pi arc) beamline definition

print, text='LOADING ARC2';
CALL, FILE="eL2L2_a2.madx"; // calling a file with ARC 2 (pi/2 arc) beamline definition

print, text='LOADING MATCHING';
call,file="eL2L2_ms.madx"; // calling a file with matching sections between arcs and straights

print, text='LOADING BETA0';
CALL, FILE='eL2L2_beta0.madx'; //calling a file with Beta-function starting points

print, text='LOADING BUNCH COMPRESSOR';
CALL, FILE='eL2L2_BC.madx'; //calling a file with Bunch Compressor Definition (as written by Sebastian Kalos)

// ---------------------------------------------------------------------
// BEAM definition
	//Notes for the BEAM definition below:
		//deltap = momentum deviation (relative, i.e. deltap = dp/p). 
		// If radiate=true, synchrotron radiation is considered in all dipoles
		// energy is in GeV by default, charge in elementary charge e: https://mad.web.cern.ch/mad/webguide/manual.html#Ch1.S8

BEAM,particle=electron,energy=1.54, charge = 3.4E+10,radiate= false, deltap = 0.003; 

// ---------------------------------------------------------------------
// BEAMLINE definition (sequence named eL2L2)

// syntax of a general beamline here: https://mad.web.cern.ch/mad/webguide/manual.html#Ch13
eL2L2: LINE=(3*EL2L2_FD,     // 3* fodo cell, as defined in the eL2L2_fodo.madx file (called above)
	     	 EL2L2_MS1_ALL,	 // full matching sequence 1 (FODO --> Arc 1), see file eL2L2_ms.madx
	     	 EL2L2_A1,       // pi arc; ARC 1, defined in eL2L2_a1.madx file (called above)
	     	 -EL2L2_MS1_ALL, // full matching sequence 1, in REVERSE order (Arc 1 --> FODO), see file eL2L2_ms.madx
	     	 34*EL2L2_FD,    // 34 fodo cells (constituting a straight section), as defined in the eL2L2_fodo.madx file (called above)
	     	 EL2L2_MS2_ALL,  // full matching sequence 2 (FODO --> Arc 2), (see file eL2L2_ms.madx)
	     	 EL2L2_A2,       // 90 degree arc ; ARC 2, defined in eL2L2_a2.madx file (called above)
	     	 EL2L2_MS3_ALL,	 // full matching line 3, (Arc2 --> Arc 2), see file eL2L2_ms.madx
	     	 EL2L2_A2,       // 90 degree arc again ; ARC 2, defined in eL2L2_a2.madx file (called above)

			 EL2L2_BC_ALL	 // BUNCH COMPRESSOR (by Sebastian Kalos, see eL2L2_BC.madx)
			 );

// ---------------------------------------------------------------------
// Survey of Twiss parameters
print, text='MAKING SURVEY';

//load the sequence eL2L2 defined above (without the USE command, nothing will run)
//better explanation: https://mad.web.cern.ch/mad/webguide/manual.html#Ch4.S10
use, sequence=eL2L2;

// while saving the twiss parameters later, only give columns containing the following information (disregard other):
select, flag=twiss,sequence=eL2L2,column=name,keyword,s,l,betx,alfx,dx,bety,alfy,dy,angle,K1L;

// savebeta documentation: https://mad.web.cern.ch/mad/webguide/manual.html#Ch20.S4
// as far as I can tell, this saves optical functions at the start (#S) of the sequence. Not entirely sure though
savebeta,label=tl_start,place=#S,sequence=eL2L2; 

// now, calculate the lattice functions using the TWISS command, using the eL2L2 sequence (USE call above is enough)
// documentation here: https://mad.web.cern.ch/mad/webguide/manual.html#Ch20
// not sure what RMATRIX stands for: "If this flag is used the the one-turn map at the location of every element is calculated and prepared for storage in the twiss table".
// better to see the documentation, I'm keeping it in there.
// dx is initial value for horizonatl dispersion, dy vertical dispersion, dpx and dpy are relative initial momentum spread
// alfx,alfy,betx,bety are initial values of alpha and beta functions ; beta has initial values read from file eL2L2_beta0.madx
twiss,RMATRIX,dx = 0.,dy=0.0, dpy=0.0, dpx = 0.,alfx = 0.,alfy = 0.,betx=eA1_S_betx,bety=eA1_S_bety,
	     	  file="eL2L2.out",save; // save twiss parameters in file "eL2L2.out"

// ---------------------------------------------------------------------
// Here starts a PARTICLE TRACKING module (I wanna see the phase space!)

MAKETHIN, SEQUENCE=eL2L2, STYLE=TEAPOT; // for tracking (at least the basic one, not PTC), one needs to convert te sequence to thin elements

TRACK, ONEPASS=true,file="tracking_data/track.out",dump,onetable; //request the track particles in phase space module
// onetable flag makes sure all particles are written in a single file, instead of one file per particle
// onepass = a single pass through the transfer line (not sure if needed but idk if it's otherwise assumed to be periodic)

OBSERVE, PLACE=DEL2L2_BC_D1; // setting observation point (element name) for tracking (apart from start and end, those are recorded by default)

n=0;
while (n < 5000) { //generate a ton of particles to be tracked in a while loop (START command)
//initialize particle to be tracked:
start, x= 1e-3*GAUSS(), px=1e-5*GAUSS(), y= 1e-5*GAUSS(), py=1e-5*GAUSS(),
	   T=5e-3*GAUSS(), //5mm bunch length initially (as per https://iopscience.iop.org/article/10.1088/1742-6596/1067/6/062023/meta)
	   PT=0.1e-2*GAUSS(); // 0.1% energy spread after DR (aslo as per https://iopscience.iop.org/article/10.1088/1742-6596/1067/6/062023/meta)
  n=n+1;
};
RUN; //actual command that starts the tracking process
endtrack; //end tracking

return; 
